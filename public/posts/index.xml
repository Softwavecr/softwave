<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on softwavecr.com</title>
    <link>https://softwavecr.com/posts/</link>
    <description>Recent content in Posts on softwavecr.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Feb 2025 16:13:55 -0500</lastBuildDate><atom:link href="https://softwavecr.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Polydojo project</title>
      <link>https://softwavecr.com/posts/polydojo-project/</link>
      <pubDate>Tue, 25 Feb 2025 16:13:55 -0500</pubDate>
      
      <guid>https://softwavecr.com/posts/polydojo-project/</guid>
      <description>Welcome Go Today I created a new project for polyglot coding practice of simple nature.
I will increase complexity gradually. The idea behind this project is to dust-off my coding skills and learn some new languages and features of these trending tools(go, py) at the same time.
The difference between this project and the Hackerrank one is, for the latter, I will only use actual HR challenges, whereas polydojo is not restricted to any source or kind of exercise.</description>
    </item>
    
    <item>
      <title>The Iron Triangle</title>
      <link>https://softwavecr.com/posts/the-iron-triangle/</link>
      <pubDate>Fri, 21 Feb 2025 23:47:37 -0500</pubDate>
      
      <guid>https://softwavecr.com/posts/the-iron-triangle/</guid>
      <description>A former boss of mine used to say, when negotiating new features with customers: &amp;ldquo;Of course we can deliver what you want, but you have to pick 2 out of 3: speed, quality and cost&amp;hellip;&amp;rdquo;. The first time I heard that I was so amazed, I figured he had to be a genius!
He was referring to the classic &amp;ldquo;Project Management Triangle&amp;rdquo; or &amp;ldquo;Triple Constraint&amp;rdquo;. This concept highlights that in project management, particularly in software development, there are three primary constraints: speed (time), quality (scope), and cost (resources).</description>
    </item>
    
    <item>
      <title>Adding tests to C# &#43; React project</title>
      <link>https://softwavecr.com/posts/adding-tests-to-existing-cs-react-project/</link>
      <pubDate>Tue, 18 Feb 2025 21:29:20 -0500</pubDate>
      
      <guid>https://softwavecr.com/posts/adding-tests-to-existing-cs-react-project/</guid>
      <description>Let&amp;rsquo;s add some basic unit tests for both the backend (C#) and frontend (React).
Backend (C#)  Install Test NuGet Packages: In your .NET project, install the necessary testing packages:  0 1 2 3  dotnet add package xunit dotnet add package xunit.runner.visualstudio dotnet add package Microsoft.NET.Test.Sdk dotnet add package Moq // For mocking dependencies    Create Test Project: Create a new xUnit Test Project in your solution (e.</description>
    </item>
    
    <item>
      <title>Coding with AI</title>
      <link>https://softwavecr.com/posts/cs-plus-react-driven-by-ai/</link>
      <pubDate>Mon, 17 Feb 2025 19:04:33 -0500</pubDate>
      
      <guid>https://softwavecr.com/posts/cs-plus-react-driven-by-ai/</guid>
      <description>Let&amp;rsquo;s build a website with AI Human &amp;ldquo;I need to build a simple, blog system, the backend preferably in c# net 9, and the frontend in react&amp;rdquo;
Gemini &amp;ldquo;Let&amp;rsquo;s outline a simple blog system architecture using C# .NET 9 for the backend and React for the frontend. This will focus on core features and provide a solid foundation you can expand upon.
Backend (C# .NET 9) API (ASP.NET Core Web API): This will be the heart of your backend, handling requests from the React frontend.</description>
    </item>
    
    <item>
      <title>Improving a Hugo [static] site</title>
      <link>https://softwavecr.com/posts/adding-react-to-hugo-sites/</link>
      <pubDate>Mon, 17 Feb 2025 16:02:44 -0500</pubDate>
      
      <guid>https://softwavecr.com/posts/adding-react-to-hugo-sites/</guid>
      <description>I am exploring ways to generally improve the UX of this site, softwavecr.com. Bear in mind it is built with Hugo(popular open-source static site generator). I am especially interested in adding React. Let&amp;rsquo;s take a look at the options and their pros and cons.
  React as a Progressive Enhancement (Sprinkling):
Hugo generates the static HTML for most of your site (content, layout, etc.). You then use React to enhance specific parts of the page that require interactivity.</description>
    </item>
    
    <item>
      <title>.NET Evolution</title>
      <link>https://softwavecr.com/posts/highlights-net-evolution/</link>
      <pubDate>Sun, 16 Feb 2025 16:34:42 -0500</pubDate>
      
      <guid>https://softwavecr.com/posts/highlights-net-evolution/</guid>
      <description>Remember dot Net 5? Were they trying to consolidate the Net Framework with Net Core?
What about Net 6?
Let&amp;rsquo;s do a quick overview of the evolution of Microsoft&amp;rsquo;s Net.
REFERENCE  The evolution of .NET into .NET 7 - Andrew Lock - 2023 Comprehensive guide to ASP NET and NET evolution - 2024 The evolution of .NET 8 - 2024 The History of the .NET Framework - 2024 The Evolution of .</description>
    </item>
    
    <item>
      <title>To microservice or not to microservice, that is the question</title>
      <link>https://softwavecr.com/posts/to-microservice-or-not-to-microservice-that-is-the-question/</link>
      <pubDate>Sat, 15 Feb 2025 19:45:42 -0500</pubDate>
      
      <guid>https://softwavecr.com/posts/to-microservice-or-not-to-microservice-that-is-the-question/</guid>
      <description>Scenario You are planning the next sprint, and navigating through the backlog suddenly find 3 stories that seem related
  New Riders need to upload a profile or avatar image.
  New Drivers need to upload their drivers licence.
  Employees need to upload their receipts for expense reports.
  You may consider the idea of having a dedicated file [micro]service solely for handling file storage(pictures). But, do we really need it?</description>
    </item>
    
    <item>
      <title>Renovating the site</title>
      <link>https://softwavecr.com/posts/renovating-this-site/</link>
      <pubDate>Thu, 13 Feb 2025 00:51:38 -0500</pubDate>
      
      <guid>https://softwavecr.com/posts/renovating-this-site/</guid>
      <description>New year, bring it on! The short term goal is to update the site to show the highlights of what has happened since 2021, fix broken links and outdated information.
Update: I found a page by Glen Thomas Berger that explains how to build a site like this, and it is at least 96% the same I did. I am giving a 4% chance of things being implemented differently only to minor details that I may not remember at the moment.</description>
    </item>
    
    <item>
      <title>Developing with .Net &#43; WebAPI and Clean Architecture</title>
      <link>https://softwavecr.com/posts/creating-web-application-on-net-core-webapi/</link>
      <pubDate>Sat, 30 Jan 2021 20:11:48 -0500</pubDate>
      
      <guid>https://softwavecr.com/posts/creating-web-application-on-net-core-webapi/</guid>
      <description>Summary In order to build great web applications, I recommend to follow the Clean Architecture Template: developers and customers will appreciate this decision given its readability, scalability, and maintainability, which will translate into efficiency and a positive cost/benefit ratio.
 Prerequites:
 0.1. IDE(VS Code, Vim, or Notepad) 0.2. Net Core SDK (3.1+) 0.3. Node.js 0.4. Git    $ dotnet new &amp;ndash;install Clean.Architecture.Solution.Template::1.1.4 to install the project template</description>
    </item>
    
    <item>
      <title>Swift Hello World</title>
      <link>https://softwavecr.com/posts/swift-intro-get-hello-world/</link>
      <pubDate>Mon, 04 Jan 2021 17:35:55 -0500</pubDate>
      
      <guid>https://softwavecr.com/posts/swift-intro-get-hello-world/</guid>
      <description>Swift Hello World  Testing git 2020.  import UIKit
class ViewController: UIViewController {
override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view. } @IBAction func showMessage(sender: UIButton) { let alertController = UIAlertController(title: &amp;quot;Welcome to My First App&amp;quot;, message: &amp;quot;Hello World&amp;quot;, preferredStyle: UIAlertController.Style.alert) alertController.addAction(UIAlertAction(title: &amp;quot;OK&amp;quot;, style: UIAlertAction.Style.default, handler: nil)) present(alertController, animated: true, completion: nil) }  }
Any surprise?</description>
    </item>
    
    <item>
      <title>Numpy and Arrays in Js</title>
      <link>https://softwavecr.com/posts/numpy-and-arrays-in-js/</link>
      <pubDate>Tue, 22 Dec 2020 15:48:59 -0500</pubDate>
      
      <guid>https://softwavecr.com/posts/numpy-and-arrays-in-js/</guid>
      <description>ASYNCHRONOUS FUNCTIONS In Python 3.4+, asynchronous functions are supported by the asyncio library.
   Topic JS Python     Define async named function async function fnName(params) {&amp;hellip;} async def fnName(p)   Define async anonymous function const fnName = async (params) =&amp;gt; {&amp;hellip;} not supported   Async call with await const result = await name(args); result = await name(ar)   Async call with then &amp;amp; catch name(args).</description>
    </item>
    
    <item>
      <title>Six Donts During Job Interviews</title>
      <link>https://softwavecr.com/posts/six-donts-during-job-interviews/</link>
      <pubDate>Thu, 17 Dec 2020 13:14:25 -0500</pubDate>
      
      <guid>https://softwavecr.com/posts/six-donts-during-job-interviews/</guid>
      <description>Do not expect to get an offer if you say   I am a motivated self-starter.
  In five years, I hope to be in your position.
  I did not like my previous boss.
  My biggest weakness is that I am a perfectionist.
  Can you tell me more about the company?
  What do your perks and benefits look like?
  Any surprise?</description>
    </item>
    
    <item>
      <title>Async HTTP Calls</title>
      <link>https://softwavecr.com/posts/async-http-calls/</link>
      <pubDate>Tue, 15 Dec 2020 17:55:32 -0500</pubDate>
      
      <guid>https://softwavecr.com/posts/async-http-calls/</guid>
      <description>HTTP – the Standard Library No Promises, async/await nor 3rd party dependencies.
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  const https = require(&amp;#39;https&amp;#39;); https.get(&amp;#39;https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY&amp;#39;, (resp) =&amp;gt; { let data = &amp;#39;&amp;#39;; // A chunk of data has been received.  resp.on(&amp;#39;data&amp;#39;, (chunk) =&amp;gt; { data += chunk; }); // The whole response has been received. Print out the result.</description>
    </item>
    
    <item>
      <title>HTTP vs SOAP vs REST</title>
      <link>https://softwavecr.com/posts/http-soap-rest/</link>
      <pubDate>Tue, 15 Dec 2020 13:24:06 -0500</pubDate>
      
      <guid>https://softwavecr.com/posts/http-soap-rest/</guid>
      <description>Summary HTTP is a communications protocol that transports messages over a network.
REST is a set of rules to exchange any(e.g. XML, JSON) messages that can use HTTP for transport.
SOAP is a protocol to exchange XML-based messages that may use HTTP for transport.
Dive-in HTTP The Hypertext Transfer Protocol (HTTP) is an application layer protocol for distributed, collaborative, hypermedia information systems. HTTP is the foundation of data communication for the World Wide Web, where hypertext documents include hyperlinks to other resources that the user can easily access, for example by a mouse click or by tapping the screen in a web browser.</description>
    </item>
    
    <item>
      <title>Promise vs Observable</title>
      <link>https://softwavecr.com/posts/promise-vs-observable/</link>
      <pubDate>Mon, 14 Dec 2020 10:21:27 -0500</pubDate>
      
      <guid>https://softwavecr.com/posts/promise-vs-observable/</guid>
      <description>1:1  a Promise is eager, whereas an Observable is lazy, a Promise is always asynchronous, while an Observable can be either synchronous or asynchronous, a Promise can provide a single value, whereas an Observable is a stream of values (from 0 to multiple values), you can apply RxJS operators to an Observable to get a new tailored stream (categorized as: creation[from, range], transformation[map, scan ], filtering[first, last], joining[mergeall, startwith], multicasting[publish, share], error handling[catchError, retry], utility[delay, timeout])  Cheat sheet The following code snippets illustrate how the same kind of operation is defined using observables and promises.</description>
    </item>
    
    <item>
      <title>Modern Js</title>
      <link>https://softwavecr.com/posts/modern-js/</link>
      <pubDate>Sun, 13 Dec 2020 21:23:31 -0500</pubDate>
      
      <guid>https://softwavecr.com/posts/modern-js/</guid>
      <description>Arrow functions Arrow functions have this syntax:
const myFunction = () =&amp;gt; { //&amp;hellip; }
The spread operator If you see
const c = [&amp;hellip;a]
This statement copies an array.
You can add items to an array as well, using
const c = [&amp;hellip;a, 2, &amp;lsquo;test&amp;rsquo;]
The &amp;hellip; is called spread operator.
Destructuring assignments You can extract just some properties from an object using this syntax:
const person = { firstName: &amp;lsquo;Tom&amp;rsquo;, lastName: &amp;lsquo;Cruise&amp;rsquo;, actor: true, age: 54 }</description>
    </item>
    
    <item>
      <title>WCF vs WebAPI</title>
      <link>https://softwavecr.com/posts/wcf-vs-webapi/</link>
      <pubDate>Thu, 10 Dec 2020 15:55:31 -0500</pubDate>
      
      <guid>https://softwavecr.com/posts/wcf-vs-webapi/</guid>
      <description>Scenario WCF 4.5 Web API     Requires support for scenarios like Message queues, end to end message security, duplex communication, distributed transactions, etc. YES NO   When you already have existing working WCF services and Wants to add HTTP support additionally. YES NO   One code base to provide support both SOAP and RESTful endpoints. YES NO   Wants to create a resource-oriented service over HTTP.</description>
    </item>
    
    <item>
      <title>The Four Pillars of Object Oriented Programming</title>
      <link>https://softwavecr.com/posts/oop-4-pillars/</link>
      <pubDate>Thu, 10 Dec 2020 01:17:20 -0500</pubDate>
      
      <guid>https://softwavecr.com/posts/oop-4-pillars/</guid>
      <description>Abstraction Only making certain aspects of the program accessible from outside of the class (private methods).
Encapsulation Wrapping up the methods and attributes of the class within the class itself.
Inheritance A class&#39; ability to inherit attributes and methods from other classes (keeps your code DRY).
Polymorphism Classes that inherit from each other being able to invoke the same method and receive a different result.</description>
    </item>
    
    <item>
      <title>My second post!</title>
      <link>https://softwavecr.com/posts/my-second-post/</link>
      <pubDate>Wed, 09 Dec 2020 22:58:19 -0500</pubDate>
      
      <guid>https://softwavecr.com/posts/my-second-post/</guid>
      <description>Just figured out how to add a title and content on each blog post!</description>
    </item>
    
    <item>
      <title>My first post!</title>
      <link>https://softwavecr.com/posts/my-first-post/</link>
      <pubDate>Tue, 08 Dec 2020 20:37:55 -0500</pubDate>
      
      <guid>https://softwavecr.com/posts/my-first-post/</guid>
      <description>I will be sharing some posts on my subjects of interest.</description>
    </item>
    
  </channel>
</rss>
